一、使用方法

1. 在内部直接插入

	<script>........</script>
	
2. 在外部插入

	<script language="javascript" src="..."></script>
	
二、语言基础

1. 弱类型变量

例子：  var username="lihao";
		var num=1;

2. 常用转义字符

	\b	退格	\n	换行
	\r	回车	\0	空字符
	\t	水平制表符
	\v	垂直制表符
	\f 	换页符
	
3. 非数字	NaN

4. 声明多个变量		var now,year,week;

5. 条件运算符	var m=a>b?a:b

6. 正则表达式	Regular Expression

	（1）字符类
					等价类
			.		[^\r\n]				除回车符和换行符之外的所有字符
			[...]	[]					匹配括号中字符序列中任意一个字符。
			[^..]	[]					匹配括号中未包含的任意字符
			\d		[0-9]				匹配一个数字字符
			\D		[^0-9]				匹配一个非数字字符
			\s 		[\t\n\x0B\f\r]		匹配任意空白字符
			\S		[^\t\n\x0B\f\r]		匹配任意非空白字符
			\w		[a-zA-Z_0-9]		匹配任意英文字母、数字以及下划线
			\W		[^a-zA-Z_0-9]		非单词字符
		
		字符类取反
			使用元字符^创建反向类（不属于某个类的内容）
			例：[^abc]表示 不是字符a或b或c的内容（匹配到abc以外的内容）

		量词
			？		出现零次或一次（最多出现一次）
			+		出现一次或多次（至少出现一次）
			*		出现零次或多次（任意次）
			{n}		出现n次
			{n,m}	出现n到m次
			{n,}	至少出现n次
			
		指定匹配的位置
			\b	单词边界	例：匹配一个单词	\bis\b	匹配到了is这个单词
			^	以xxxx开始
			$	以xxxx结束
			\B	非单词边界
			
				
		范围类	
			[a-z]	表示从a到z的任意字符（包含z和a本身，因为是闭区间）
			[a-zA-Z]	大小写都匹配
			[a-zA-Z]	大小写都匹配，并且匹配了短横线
		
		修饰符：
			g：全文搜索，不添加则搜索到第一个匹配停止
			i：ignore case 忽略大小写，默认大小写敏感
			m：multiple lines 多行搜索
			lastIndex:是当前表达式匹配内容的最后一个字符的下一个位置
			souce:正则表达式的文本字符串
			
		元字符：
			原义文本字符： a b c d 
			元字符：有特殊含义的非字母字符，在不同的情况下有不一样的意思
				*
				+
				？
				$
				^
				.
				|
				()
				{}
				[]
		
		贪婪模式：
			尽可能多的匹配	用在\d{2,5}默认匹配5次
		非贪婪模式：
			在量词后面加？即可,例：\d{2,5}？
			
		分组：
			()
			例：li(hao){3}	匹配了 hao 3次
			|
			例：lihao|wangyi	匹配lihao或wangyi
		反向引用：
			2015-12-25 =》 12/25/2015
			‘2015-12-25’.replace(/(\d{4})-(\d{2})-(\d{2})/g,'$2$3$1');
		忽略分组：
			在分组内加 ？：	此时该分组就不能被捕获了，则不能用$来引用了
		
		前瞻：
			正则表达式从文本头部向尾部解析，文本尾部方向称为‘前’
			前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，
			后顾/后瞻方向相反
			
		正向前瞻：exp(?=assert)例：\w(?=\d)	匹配符合后面是数字的文字
		负向前瞻：exp(?!assert)例：
		
	（2）创建对象
	
		第一种方法；
			var objExp=new RegExp("\\d");	//创建正则表达式对象
			只能匹配到第一个出现的数字
			var objExp=new RegExp("\\d","g");	//创建正则表达式对象
			匹配所有字符
		第二种方法：
			var objExp=/\d/;
			var objExp=/\d/g;
			
	（3）模式匹配
	
			test()方法:用于对一个指定的字符串执行模式匹配，返回true、false
			
				objExp.test(str)
				/e/.test("The best things in life are free!")
			
			exec() 方法用于检索字符串中的正则表达式的匹配。
				
				该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。
			
				/e/.exec("The best things in life are free!");
					字符串中含有 "e"，所以该实例输出为:e
			
			使用字符串方法
				search() 方法 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，
							  并返回子串的起始位置。
					
				replace() 方法 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。
				
				match() 	检索字符串，找一个或多个regexp匹配的文本
				
				split()		将字符串分割为字符数组	例：'a1b2c3d'.split(/\d/);//["a","b","c","d"]
			
	（4）一些小例子
			
		var reg= /\bis\b/g;	
		var reg= new RegExp('\\bis\\b','g');	
				
				
				
				
				
				
				
				
				
				
				
				
				
				